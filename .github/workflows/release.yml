name: Publish releases

on: push

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the source code
        uses: actions/checkout@v2

      - name: Determine the tag for branch builds
        if: startsWith(github.ref, 'refs/heads/')
        run: echo "betty_tag=$(git rev-parse --abbrev-ref HEAD)-dev" >> $GITHUB_ENV
        shell: bash

      - name: Determine the tag for tag builds
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "betty_tag=$(echo '{{ github.ref }}' | awk '{print substr($1,11)}')" >> $GITHUB_ENV
        shell: bash

      # @todo How to determine if any release exists for the given tag at all?
      - name: Get ID of the previous release, if there is any
        run: 'echo "betty_release_id=$(curl -H ''Accept: application/vnd.github.v3+json'' https://api.github.com/repos/bartfeenstra/betty/releases/tags/master-dev | jq -r ''.id'')" >> $GITHUB_ENV'
        shell: bash

      - name: Delete the previous release, if there is any
        run: 'curl -X DELETE -H ''Accept: application/vnd.github.v3+json'' https://api.github.com/repos/bartfeenstra/betty/releases/${{ env.betty_release_id }}'
        shell: bash

      - name: Delete the previous tag, if there is any
        run: git push --delete --force origin "$(git rev-parse --abbrev-ref HEAD)-dev"
        shell: bash

      - name: Tag the release
        run: git tag ${{ env.betty_tag }}
        shell: bash

      - name: Push the release tag
        run: git push origin ${{ env.betty_tag }}
        shell: bash
  pyinstaller-executable:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: 'Windows'
            os: windows-latest
            dist_file_name: betty.exe
            notification_icon: ðŸªŸ
            notification_os: Windows
    steps:
      - name: Check out the source code
        uses: actions/checkout@v2

      - name: Determine the tag for branch builds
        if: startsWith(github.ref, 'refs/heads/')
        run: echo "betty_tag=$(git rev-parse --abbrev-ref HEAD)-dev" >> $GITHUB_ENV
        shell: bash

      - name: Determine the tag for tag builds
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "betty_tag=$(echo '{{ github.ref }}' | awk '{print substr($1,11)}')" >> $GITHUB_ENV
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Build the development environment
        run: ./bin/build-dev
        shell: bash

      - name: Get the pip cache directory path
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"
        shell: bash

      - name: Cache the pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Build the executable
        run: ./bin/build-pyinstaller
        shell: bash

      - name: Publish the executable
        id: publish
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/${{ matrix.dist_file_name }}
          tag_name: ${{ env.betty_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify collaborators of the release
        uses: mshick/add-pr-comment@v1
        with:
          message: ${{ matrix.notification_icon }} Uploaded ${{ matrix.dist_file_name }} for commit ${{ github.sha }} to ${{ steps.publish.outputs.url }}. You can download it, test it on ${{ matrix.notification_os }}, and post your feedback in a comment to this pull request ðŸ’•
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          allow-repeats: false
